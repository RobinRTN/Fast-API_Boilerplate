version: "3.9"

services:
  frontend:
    image: robinrtn/frontend:latest  # Using Docker Hub image
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    networks:
      - internal_network

  backend:
    image: robinrtn/backend:latest  # Using Docker Hub image
    environment:
      FLASK_ENV: ${FLASK_ENV}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SQLALCHEMY_DATABASE_URI: ${SQLALCHEMY_DATABASE_URI}
      PYTHONPATH: /app
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - internal_network
    depends_on:
      - db
    volumes:
      - backend_migrations:/app/migrations
      - backend_seeds:/app/seeds

  db:
    image: robinrtn/db:latest  # Using Docker Hub image
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    networks:
      - internal_network
    volumes:
      - db_data:/var/lib/postgresql/data

  nginx:
    image: nginx:latest  # Using latest official Nginx image
    ports:
      - "4430:4430"  # HTTPS
      - "8080:8080"  # HTTP Redirect
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certs:/etc/nginx/ssl:ro  # Mount SSL certificates
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    networks:
      - internal_network
    depends_on:
      - backend
      - frontend

  scraper:
    image: robinrtn/scraper:latest  # Using Docker Hub image
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - internal_network
    depends_on:
      - db
      - backend

networks:
  internal_network:
    driver: overlay  # Swarm requires overlay networks

volumes:
  db_data:
  backend_migrations:
  backend_seeds:
